<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>配置Debian Server</title>
    <link href="/2025/07/03/%E9%85%8D%E7%BD%AEDebian-Server/"/>
    <url>/2025/07/03/%E9%85%8D%E7%BD%AEDebian-Server/</url>
    
    <content type="html"><![CDATA[<blockquote><p>实验室有台服务器需要从老版本的CentOS重装为Debian 12。当然在重装之前需要进行<strong>数据备份，这很重要！！</strong></p></blockquote><h2 id="一、安装Debian系统"><a href="#一、安装Debian系统" class="headerlink" title="一、安装Debian系统"></a><strong>一、安装Debian系统</strong></h2><ol><li><p>下载Debian镜像：访问Debian官网，下载最新的Debian 12镜像。&#x20;</p></li><li><p>制作启动U盘：使用工具（Rufus）将下载的镜像文件写入U盘，制作成启动盘。&#x20;</p></li><li><p>启动安装：通过U盘启动计算机，进入BIOS，然后到Debian安装界面。&#x20;</p></li><li><p>设置系统：按照提示进行设置。</p><ol><li><p>安装非图形化界面</p></li><li><p>不需要进行网络配置，等安装好系统后在进行网络配置</p></li><li><p>安装ssh server（也可以等安装后，再下载配置）</p></li><li><p>除了一个启动磁盘自动分区外，其他磁盘不需要挂载</p></li></ol></li></ol><h2 id="二、配置网络-x20"><a href="#二、配置网络-x20" class="headerlink" title="二、配置网络&#x20;"></a>二、配置网络&#x20;</h2><h3 id="1-配置静态IP地址"><a href="#1-配置静态IP地址" class="headerlink" title="1. 配置静态IP地址"></a>1. 配置静态IP地址</h3><p>调整网络配置 <code>/etc/network/interfaces</code>，使得其形如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">auto enp6s0f0<br>iface enp6s0f0 inet static<br>    address 10.176.25.53 <span class="hljs-comment"># 分配到这个服务器的IP地址</span><br>    netmask 255.255.254.0 <span class="hljs-comment"># 网段的子网掩码，这个子网都是一样的</span><br>    gateway 10.176.24.1 <span class="hljs-comment"># 一般是子网的第一个主机</span><br></code></pre></td></tr></table></figure><p>网络接口名字<code>altname enp6s0f0</code>每个主机是不大一样的，使用<code>ip a</code>命令查看网络端口对应的<code>altname</code>。</p><p>重启网络网络服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl restart networking.service<br></code></pre></td></tr></table></figure><h3 id="2-校园网络认证"><a href="#2-校园网络认证" class="headerlink" title="2. 校园网络认证"></a>2. 校园网络认证</h3><p>挂载含有网络认证脚本的U盘，将脚本复制到服务器。</p><p>运行脚本进行网络认证。</p><blockquote><p>到这步已经ping通外网IP，但是不能通过域名访问。</p></blockquote><h3 id="3-修改DNS"><a href="#3-修改DNS" class="headerlink" title="3. 修改DNS"></a>3. 修改DNS</h3><p>修改DNS配置文件<code>/etc/resolv.conf</code>，添加以下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在原始文件基础上添加</span><br><span class="hljs-comment"># nameserver 202.120.224.26 # 不能正常使用</span><br><span class="hljs-comment"># nameserver 1.1.1.1 # 不能正常使用</span><br>nameserver 114.114.114.114<br>nameserver 8.8.8.8<br></code></pre></td></tr></table></figure><blockquote><p>现在可以进行域名访问了。</p></blockquote><h2 id="三、apt换源"><a href="#三、apt换源" class="headerlink" title="三、apt换源"></a>三、apt换源</h2><p>修改<code>/etc/apt/sources.list</code>文件里的内容为（如果没有安装ssh server进行远程操作的话，可以把这个命令写到一个U盘文件里，使用<code>cat xx &gt;&gt; /etc/apt/sources.list</code>写入）</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 统一采用阿里云镜像 </span><br>deb https:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/debian/</span> bookworm main non-free non-free-firmware contrib deb-src https:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/debian/</span> bookworm main non-free non-free-firmware contrib deb https:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/debian-security/</span> bookworm-security main deb-src https:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/debian-security/</span> bookworm-security main deb https:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/debian/</span> bookworm-updates main non-free non-free-firmware contrib deb-src https:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/debian/</span> bookworm-updates main non-free non-free-firmware contrib deb https:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/debian/</span> bookworm-backports main non-free non-free-firmware contrib deb-src https:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/debian/</span> bookworm-backports main non-free non-free-firmware contrib<br></code></pre></td></tr></table></figure><p>终于可以使用apt，把需要的软件都安装一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#root </span><br>apt-get update &amp;&amp; apt-get upgrade <br><span class="hljs-comment"># 安装必要软件 </span><br>apt-get install tmux zsh vim neofetch git <span class="hljs-built_in">sudo</span> curl rsync duf zip unzip screen fzf fd-find<br></code></pre></td></tr></table></figure><h2 id="四、配置SSH-服务"><a href="#四、配置SSH-服务" class="headerlink" title="四、配置SSH 服务"></a><strong>四、配置SSH 服务</strong></h2><h3 id="1-安装SSH-服务（如果安装时没有装ssh-server）"><a href="#1-安装SSH-服务（如果安装时没有装ssh-server）" class="headerlink" title="1. 安装SSH 服务（如果安装时没有装ssh server）"></a>1. <strong>安装SSH 服务（如果安装时没有装ssh server）</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt-get install -y ssh<br></code></pre></td></tr></table></figure><p>安装完成ssh 服务默认是开启的，手动开启命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/etc/init.d/ssh start<br></code></pre></td></tr></table></figure><p>查看ssh服务状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/etc/init.d/ssh status<br></code></pre></td></tr></table></figure><h3 id="2-修改SSH配置文件"><a href="#2-修改SSH配置文件" class="headerlink" title="2. 修改SSH配置文件"></a>2. 修改SSH配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/ssh/sshd_config<br></code></pre></td></tr></table></figure><p>将57行的注释取消，将yes改为no</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#line 57:</span><br>PasswordAuthentication no<br></code></pre></td></tr></table></figure><h3 id="3-生成密钥（远程登陆）"><a href="#3-生成密钥（远程登陆）" class="headerlink" title="3. 生成密钥（远程登陆）"></a>3. 生成密钥（远程登陆）</h3><p>生成秘钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 生成秘钥</span><br>ssh-keygen -t rsa -b 4096<br></code></pre></td></tr></table></figure><p>将公钥写入 <code>authorized_keys</code>文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> id_rsa.pub &gt;&gt; authorized_keys<br></code></pre></td></tr></table></figure><p>将私钥拷贝到 U 盘（临时挂载点）上面</p><blockquote><p>这一步完成之后，即可回到实验室，不用留在机房里面了 🍺</p></blockquote><h2 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h2><h3 id="配置-sudo"><a href="#配置-sudo" class="headerlink" title="配置 sudo"></a>配置 <code>sudo</code></h3><p><code>Debian</code> 的 <code>visudo</code> 操作是使用 <code>nano</code> 来进行的。如果不喜欢 <code>nano</code> ，想要换成 <code>vim</code> ，请使用如下指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">update-alternatives --config editor <span class="hljs-comment"># 进入可选列表之后选择 vim</span><br></code></pre></td></tr></table></figure><p>编辑 <code>visudo</code>，禁用特定用户的特定权限</p><h3 id="设置时钟同步"><a href="#设置时钟同步" class="headerlink" title="设置时钟同步"></a>设置时钟同步</h3><p>硬件时钟矫正 <code>hwclock</code></p><p>设置时间 <code>date</code> 和 <code>hwclock</code> 同步</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> hwclock --systohc<br></code></pre></td></tr></table></figure><p>修改时间为 <code>24小时</code></p><p>重新加载守护进程配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl daemon-reload# 按照 /etc/fstab 重新挂载&amp;&amp; mount -a<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>linux(无桌面环境)上使用Clash或Mihomo设置代理</title>
    <link href="/2025/06/29/linux(%E6%97%A0%E6%A1%8C%E9%9D%A2%E7%8E%AF%E5%A2%83)%E4%B8%8A%E4%BD%BF%E7%94%A8Clash%20%E6%88%96Mihomo%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86/"/>
    <url>/2025/06/29/linux(%E6%97%A0%E6%A1%8C%E9%9D%A2%E7%8E%AF%E5%A2%83)%E4%B8%8A%E4%BD%BF%E7%94%A8Clash%20%E6%88%96Mihomo%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86/</url>
    
    <content type="html"><![CDATA[<blockquote><p>起因：实验室平时科研有科学上网的需求，为此专门在一个低配、闲置的服务器上配置代理服务，供大家使用。</p></blockquote><h2 id="下载Clash或Mihomo"><a href="#下载Clash或Mihomo" class="headerlink" title="下载Clash或Mihomo"></a>下载Clash或Mihomo</h2><h3 id="Clash"><a href="#Clash" class="headerlink" title="Clash"></a>Clash</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 下载 Clash Premium</span><br>wget https://github.com/vernesong/OpenClash/raw/2d53dcac0a3c28151eac5537d8b97c918d916c28/dev/premium/clash-linux-amd64-2023.08.17-11-g0f901d0.gz<br><br><span class="hljs-comment"># 解压文件</span><br>gunzip clash-linux-amd64-2023.08.17-11-g0f901d0.gz<br><br><span class="hljs-comment"># 添加执行权限</span><br><span class="hljs-built_in">chmod</span> +x clash-linux-amd64-2023.08.17-11-g0f901d0<br><br><span class="hljs-comment"># 移动到系统目录</span><br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mv</span> clash-linux-amd64-2023.08.17-11-g0f901d0 /usr/local/bin/clash<br></code></pre></td></tr></table></figure><hr><h3 id="Mihomo"><a href="#Mihomo" class="headerlink" title="Mihomo"></a>Mihomo</h3><ol><li>创建程序目录</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /opt<br><br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mkdir</span> Clash<br><br><span class="hljs-built_in">cd</span> Clash<br></code></pre></td></tr></table></figure><ol start="2"><li>下载Mihomo二进制文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> wget https://ghproxy.cn/https://github.com/MetaCubeX/mihomo/releases/download/v1.18.10/mihomo-linux-amd64-compatible-go120-v1.18.10.gz<br><br><span class="hljs-built_in">sudo</span> gzip -d mihomo-linux-amd64-compatible-go120-v1.18.10.gz<br><br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mv</span> mihomo-linux-amd64-compatible-go120-v1.18.10 mihomo<br><br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">chmod</span> +x mihomo<br></code></pre></td></tr></table></figure><ol start="3"><li>下载GeoIP数据库</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> wget https://ghproxy.cn/https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/geoip.metadb<br></code></pre></td></tr></table></figure><hr><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><h4 id="启动Mihomo"><a href="#启动Mihomo" class="headerlink" title="启动Mihomo"></a>启动Mihomo</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> ./mihomo -d ./  <span class="hljs-comment"># 在Clash目录下启动</span><br></code></pre></td></tr></table></figure><hr><h4 id="启动Clash"><a href="#启动Clash" class="headerlink" title="启动Clash"></a>启动Clash</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 直接输入clash</span><br>clash<br></code></pre></td></tr></table></figure><p>clash 启动后会在 <code>~/.config/clash</code> 目录生成配置文件。包括<code>config.yaml</code>和<code>Country.mmdb</code>。</p><hr><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>自己配置或者从订阅地址中下载</p><ol><li>获取配置文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 方法1：通过订阅链接获取</span><br><span class="hljs-built_in">sudo</span> wget -O ./config.yaml [你的订阅链接]<br><br><span class="hljs-comment"># 方法2：通过curl获取</span><br><span class="hljs-built_in">sudo</span> curl -o ./config.yaml [你的订阅链接]<br><br><span class="hljs-comment"># 方法3：手动创建配置文件</span><br><span class="hljs-built_in">sudo</span> nano config.yaml<br></code></pre></td></tr></table></figure><ul><li>配置关键参数</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">external-ui: ./ui       <span class="hljs-comment"># 指向WebUI目录</span><br><br>external-controller: 0.0.0.0:9090  <span class="hljs-comment"># API监听地址</span><br><br>[secret: XXX] 可以设置或者不设置<br></code></pre></td></tr></table></figure><hr><h2 id="配置WebUI面板"><a href="#配置WebUI面板" class="headerlink" title="配置WebUI面板"></a>配置WebUI面板</h2><h3 id="克隆WebUI仓库"><a href="#克隆WebUI仓库" class="headerlink" title="克隆WebUI仓库"></a>克隆WebUI仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> git <span class="hljs-built_in">clone</span> https://ghproxy.cn/https://github.com/metacubex/metacubexd.git -b gh-pages ./ui<br></code></pre></td></tr></table></figure><hr><h3 id="访问WebUI"><a href="#访问WebUI" class="headerlink" title="访问WebUI"></a>访问WebUI</h3><p>启动服务后，再在浏览器打开：<code>http://[服务器IP]:9090/ui</code></p><hr><h2 id="配置Systemd服务"><a href="#配置Systemd服务" class="headerlink" title="配置Systemd服务"></a>配置Systemd服务</h2><h3 id="Clash-1"><a href="#Clash-1" class="headerlink" title="Clash"></a>Clash</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> vim /etc/systemd/system/clash.service<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plain&#x20;text">[Unit]<br>Description=Clash Service<br>After=network.target<br><br>[Service]<br>ExecStart=/usr/local/bin/clash-linux-amd64<br>Restart=always<br>RestartSec=3<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><hr><h3 id="Mihomo-1"><a href="#Mihomo-1" class="headerlink" title="Mihomo"></a>Mihomo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> vim /etc/systemd/system/mihomo.service<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plain&#x20;text">[Unit]<br>Description=mihomo Daemon<br>After=network.target<br><br>[Service]<br>Type=simple<br>ExecStart=/opt/Clash/mihomo -d /opt/Clash/<br>Restart=always<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><hr><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl daemon-reload <span class="hljs-comment"># 重载服务配置</span><br><span class="hljs-built_in">sudo</span> systemctl <span class="hljs-built_in">enable</span> clash <span class="hljs-comment"># 设置Clash开机自启</span><br><span class="hljs-built_in">sudo</span> systemctl start clash <span class="hljs-comment"># 启动Clash服务</span><br><span class="hljs-built_in">sudo</span> systemctl restart clash <span class="hljs-comment"># 重启Clash服务</span><br><span class="hljs-built_in">sudo</span> systemctl stop clash <span class="hljs-comment"># 重启Clash服务</span><br><span class="hljs-built_in">sudo</span> systemctl status clash <span class="hljs-comment"># 查看服务状态</span><br><br><span class="hljs-built_in">sudo</span> systemctl <span class="hljs-built_in">enable</span> mihomo<br><span class="hljs-built_in">sudo</span> systemctl start mihomo<br></code></pre></td></tr></table></figure><hr><h2 id="配置系统代理"><a href="#配置系统代理" class="headerlink" title="配置系统代理"></a>配置系统代理</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 添加到 ~/.bashrc</span><br><span class="hljs-built_in">export</span> https_proxy=http://127.0.0.1:7890<br><span class="hljs-built_in">export</span> http_proxy=http://127.0.0.1:7890<br><span class="hljs-built_in">export</span> all_proxy=socks5://127.0.0.1:7891<br><br><span class="hljs-comment"># 使配置生效</span><br><span class="hljs-built_in">source</span> ~/.bashrc<br></code></pre></td></tr></table></figure><hr><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><h3 id="端口占用检查"><a href="#端口占用检查" class="headerlink" title="端口占用检查"></a><strong>端口占用检查</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> lsof -i :9090<br></code></pre></td></tr></table></figure><hr><h3 id="防火墙设置（以Ubuntu为例）"><a href="#防火墙设置（以Ubuntu为例）" class="headerlink" title="防火墙设置（以Ubuntu为例）"></a>防火墙设置（以Ubuntu为例）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> ufw allow 9090/tcp<br><span class="hljs-built_in">sudo</span> ufw reload<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux Servers使用NFS共享文件</title>
    <link href="/2025/06/28/Linux-Servers%E4%BD%BF%E7%94%A8NFS%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6/"/>
    <url>/2025/06/28/Linux-Servers%E4%BD%BF%E7%94%A8NFS%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<blockquote><p>起因：实验室的服务器需要进行重装系统，在那之前需要进行存量数据备份。而数据备份需要大量空间&amp;&amp;数据传输，我们采用nfs的方式将目标服务器上的数据进行转移。</p></blockquote><hr><h2 id="🔧-一、服务器端配置（提供共享目录）"><a href="#🔧-一、服务器端配置（提供共享目录）" class="headerlink" title="🔧 一、服务器端配置（提供共享目录）"></a>🔧 <strong>一、服务器端配置（提供共享目录）</strong></h2><h3 id="1-安装NFS服务包"><a href="#1-安装NFS服务包" class="headerlink" title="1. 安装NFS服务包"></a>1. <strong>安装NFS服务包</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##  Debian</span><br><span class="hljs-built_in">sudo</span> apt update<br><span class="hljs-built_in">sudo</span> apt install nfs-kernel-server  <span class="hljs-comment"># 包含NFS核心服务</span><br><br><span class="hljs-comment">## CentOS</span><br><span class="hljs-built_in">sudo</span> yum install -y nfs-utils rpcbind <br><span class="hljs-comment"># nfs-utils 包含 NFS 服务核心组件，rpcbind 用于 RPC 协议通信。</span><br></code></pre></td></tr></table></figure><h3 id="2-创建共享目录并设置权限"><a href="#2-创建共享目录并设置权限" class="headerlink" title="2. 创建共享目录并设置权限"></a>2. <strong>创建共享目录并设置权限</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mkdir</span> -p /nfs_share  <span class="hljs-comment"># 创建共享目录</span><br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">chown</span> nobody:nogroup /nfs_share  <span class="hljs-comment"># 所有权赋予匿名用户（安全推荐）</span><br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">chmod</span> 777 /nfs_share<br></code></pre></td></tr></table></figure><h3 id="3-配置NFS导出规则（-etc-exports）"><a href="#3-配置NFS导出规则（-etc-exports）" class="headerlink" title="3. 配置NFS导出规则（/etc/exports）"></a>3. <strong>配置NFS导出规则（<code>/etc/exports</code>）</strong></h3><p>编辑配置文件，添加共享规则（示例允许IP段<code>192.168.1.0/24</code>读写）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> vim /etc/exports<br></code></pre></td></tr></table></figure><p>添加内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">/nfs_share 192.168.1.0/24(rw,<span class="hljs-built_in">sync</span>,no_subtree_check,root_squash)<br><span class="hljs-comment"># 如需限制特定IP，替换192.168.1.0/24为客户端IP（如192.168.1.100）</span><br></code></pre></td></tr></table></figure><ul><li><strong>参数说明</strong>：<ul><li><code>rw</code>：读写权限</li><li><code>sync</code>：数据同步写入磁盘（安全优先）</li><li><code>async</code> ：将数据先保存在内存缓冲区中，必要时才写入磁盘。</li><li><code>no_subtree_check</code>：禁用子目录检查（提升性能）</li><li><code>root_squash</code>：将客户端的root用户映射为匿名用户（<strong>关键安全选项</strong>），也可设为<code>no_root_squash</code></li><li><code>all_squash</code>：强制映射客户端用户为匿名用户</li><li><code>anonuid/anongid=65534</code>：映射到 <code>nobody</code> 用户（CentOS 默认 UID&#x2F;GID）</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> exportfs -a  <span class="hljs-comment"># 重新加载exports配置</span><br></code></pre></td></tr></table></figure><h3 id="4-应用配置并启动服务"><a href="#4-应用配置并启动服务" class="headerlink" title="4. 应用配置并启动服务"></a>4. <strong>应用配置并启动服务</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Debian</span><br><span class="hljs-built_in">sudo</span> systemctl restart nfs-kernel-server  <span class="hljs-comment"># 重启服务</span><br><span class="hljs-built_in">sudo</span> systemctl <span class="hljs-built_in">enable</span> nfs-kernel-server  <span class="hljs-comment"># 开机自启</span><br><br><span class="hljs-comment"># CentOS</span><br><span class="hljs-built_in">sudo</span> systemctl <span class="hljs-built_in">enable</span> --now rpcbind nfs-server  <span class="hljs-comment"># 同时启用 rpcbind 和 NFS</span><br><span class="hljs-built_in">sudo</span> exportfs -arv  <span class="hljs-comment"># 动态重载配置</span><br></code></pre></td></tr></table></figure><hr><h2 id="💻-二、客户端配置（挂载共享目录）"><a href="#💻-二、客户端配置（挂载共享目录）" class="headerlink" title="💻 二、客户端配置（挂载共享目录）"></a>💻 <strong>二、客户端配置（挂载共享目录）</strong></h2><h3 id="1-安装NFS客户端工具"><a href="#1-安装NFS客户端工具" class="headerlink" title="1. 安装NFS客户端工具"></a>1. <strong>安装NFS客户端工具</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Debian</span><br><span class="hljs-built_in">sudo</span> apt update<br><span class="hljs-built_in">sudo</span> apt install nfs-common  <span class="hljs-comment"># 包含mount.nfs等工具</span><br><br><span class="hljs-comment"># CentOS</span><br><span class="hljs-built_in">sudo</span> yum install -y nfs-utils  <span class="hljs-comment"># 无需 rpcbind</span><br></code></pre></td></tr></table></figure><h3 id="2-创建本地挂载点"><a href="#2-创建本地挂载点" class="headerlink" title="2. 创建本地挂载点"></a>2. <strong>创建本地挂载点</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mkdir</span> -p /mnt/nfs_client  <span class="hljs-comment"># 本地目录用于挂载</span><br></code></pre></td></tr></table></figure><h3 id="3-手动挂载共享目录"><a href="#3-手动挂载共享目录" class="headerlink" title="3. 手动挂载共享目录"></a>3. <strong>手动挂载共享目录</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> mount -t nfs -o vers=4.2,noatime 192.168.1.10:/nfs_share /mnt/nfs_client<br></code></pre></td></tr></table></figure><ul><li><strong>参数说明</strong>：<ul><li><code>192.168.1.10</code>：替换为NFS服务器IP</li><li><code>vers=4.2</code>：强制使用 NFSv4.2（性能更好）</li><li><code>noatime</code>：禁用访问时间记录（减少磁盘写入）</li></ul></li></ul><h3 id="4-开机自动挂载（编辑-etc-fstab）"><a href="#4-开机自动挂载（编辑-etc-fstab）" class="headerlink" title="4. 开机自动挂载（编辑/etc/fstab）"></a>4. <strong>开机自动挂载（编辑<code>/etc/fstab</code>）</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> vim /etc/fstab<br></code></pre></td></tr></table></figure><p>添加行：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">1</span>.<span class="hljs-number">10</span>:/nfs_share  /mnt/nfs_client  nfs4  _netdev,noatime,vers=<span class="hljs-number">4</span>.<span class="hljs-number">2</span>,proto=tcp,hard,timeo=<span class="hljs-number">600</span>,retrans=<span class="hljs-number">2</span>  <span class="hljs-number">0</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><ul><li><strong>关键选项</strong>：<ul><li><code>_netdev</code>：等待网络就绪后再挂载（避免启动失败）</li><li><code>noatime</code>：禁用访问时间更新（减少磁盘写入）</li><li><code>hard</code> + <code>timeo=600</code>：网络中断时持续重试（避免进程卡死）</li></ul></li></ul><h3 id="5-验证挂载状态"><a href="#5-验证挂载状态" class="headerlink" title="5. 验证挂载状态"></a>5. <strong>验证挂载状态</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">df</span> -hT | grep nfs  <span class="hljs-comment"># 查看挂载信息</span><br>vim /mnt/nfs_client/test.txt  <span class="hljs-comment"># 测试写入</span><br></code></pre></td></tr></table></figure><hr><h2 id="⚠️-停止NFS共享服务"><a href="#⚠️-停止NFS共享服务" class="headerlink" title="⚠️ 停止NFS共享服务"></a>⚠️ 停止NFS共享服务</h2><h3 id="💻-一、客户端（先停止客户端）"><a href="#💻-一、客户端（先停止客户端）" class="headerlink" title="💻 一、客户端（先停止客户端）"></a>💻 <strong>一、客户端（先停止客户端）</strong></h3><h4 id="1-卸载挂载目录"><a href="#1-卸载挂载目录" class="headerlink" title="1. 卸载挂载目录"></a>1. <strong>卸载挂载目录</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> umount /mnt/nfs_share  <span class="hljs-comment"># 替换为实际挂载点</span><br></code></pre></td></tr></table></figure><p>强制卸载（谨慎使用）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> umount -lf /mnt/nfs_share  <span class="hljs-comment"># 懒惰卸载（延迟断开）</span><br><span class="hljs-built_in">sudo</span> umount -f /mnt/nfs_share   <span class="hljs-comment"># 强制卸载（可能丢数据）</span><br></code></pre></td></tr></table></figure><h4 id="2-清理客户端配置"><a href="#2-清理客户端配置" class="headerlink" title="2. 清理客户端配置"></a>2. <strong>清理客户端配置</strong></h4><ul><li><p>删除<code>/etc/fstab</code>中NFS挂载行；例如移除：<code>192.168.1.100:/shared_dir /mnt/nfs_share nfs defaults 0 0</code></p></li><li><p>删除自动挂载配置</p></li></ul><hr><h3 id="🔧-二、服务端（后停止服务端）"><a href="#🔧-二、服务端（后停止服务端）" class="headerlink" title="🔧 二、服务端（后停止服务端）"></a>🔧 <strong>二、服务端（后停止服务端）</strong></h3><h4 id="1-停止NFS服务"><a href="#1-停止NFS服务" class="headerlink" title="1. 停止NFS服务"></a>1. <strong>停止NFS服务</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Debian/Ubuntu</span><br><span class="hljs-built_in">sudo</span> systemctl stop nfs-kernel-server<br><br><span class="hljs-comment"># CentOS/RHEL</span><br><span class="hljs-built_in">sudo</span> systemctl stop nfs-server<br></code></pre></td></tr></table></figure><ul><li>需同时停止依赖服务：<code>sudo systemctl stop rpcbind</code></li></ul><h4 id="2-禁用开机自启"><a href="#2-禁用开机自启" class="headerlink" title="2. 禁用开机自启"></a>2. <strong>禁用开机自启</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl <span class="hljs-built_in">disable</span> nfs-server nfs-kernel-server rpcbind<br></code></pre></td></tr></table></figure><h4 id="3-清理共享配置"><a href="#3-清理共享配置" class="headerlink" title="3. 清理共享配置"></a>3. <strong>清理共享配置</strong></h4><ul><li><p>删除<code>/etc/exports</code>中对应的共享条目；例如移除：<code>/shared_dir 192.168.1.0/24(rw,sync)</code></p></li><li><p>重载配置：<code>sudo exportfs -rva</code></p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>使用 hexo &amp;&amp; GitHub Pages 搭建自己的博客</title>
    <link href="/2025/06/22/%E4%BD%BF%E7%94%A8-hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
    <url>/2025/06/22/%E4%BD%BF%E7%94%A8-hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<blockquote><p>起因：在大学期间用过一些app去写过一些笔记，发现要么是app不好用；要么是自己太弄得太随意了，根本不能回头看。总之，之前很多笔记都被自己给抛弃了。如今下定决心自己搞一个技术博客，专门记录自己的学习笔记。</p></blockquote><p>Hexo是一个使用MarkDown格式文本快速构建静态网页的工具 <a href="https://hexo.io/zh-cn/">Hexo官网</a>；而GitHub Pages则是能部署一个静态网页，这俩简直是天作之合。</p><hr><h1 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h1><p>你需要准备好以下工具 Node.js、 Git。</p><h1 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h1><h2 id="下载-Hexo"><a href="#下载-Hexo" class="headerlink" title="下载 Hexo"></a>下载 Hexo</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-cli -g<br></code></pre></td></tr></table></figure><h2 id="初始化-Hexo"><a href="#初始化-Hexo" class="headerlink" title="初始化 Hexo"></a>初始化 Hexo</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init [目录名称]   <span class="hljs-comment">#这里可以指定目录名称，默认为blog</span><br><span class="hljs-built_in">cd</span> blog               <span class="hljs-comment">#进入blog目录</span><br>npm install           <span class="hljs-comment">#安装依赖</span><br>hexo server           <span class="hljs-comment">#启动本地web服务，在浏览器输入localhost:4000预览博客</span><br></code></pre></td></tr></table></figure><h2 id="生成静态网页"><a href="#生成静态网页" class="headerlink" title="生成静态网页"></a>生成静态网页</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g<br>hexo generate<br></code></pre></td></tr></table></figure><p>生成后的关键文件和文件夹</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs nix">.deploy<span class="hljs-symbol">/</span>        <span class="hljs-comment">#需部署文件</span><br>node_modules<span class="hljs-symbol">/</span>   <span class="hljs-comment">#node.js依赖的插件</span><br>public<span class="hljs-symbol">/</span>         <span class="hljs-comment">#生成的静态网页文件</span><br>scaffolds<span class="hljs-symbol">/</span>      <span class="hljs-comment">#模版</span><br>source<span class="hljs-symbol">/</span>         <span class="hljs-comment">#博客正文和其他源文件</span><br>themes<span class="hljs-symbol">/</span>         <span class="hljs-comment">#主题</span><br>_config.yml     <span class="hljs-comment">#全局配置文件</span><br></code></pre></td></tr></table></figure><h2 id="Hexo-常用命令"><a href="#Hexo-常用命令" class="headerlink" title="Hexo 常用命令"></a>Hexo 常用命令</h2><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs axapta">hexo help                   <span class="hljs-meta">#查看帮助</span><br>hexo init                   <span class="hljs-meta">#初始化一个目录</span><br>hexo <span class="hljs-keyword">new</span> draft <span class="hljs-string">&quot;pageName&quot;</span><br>hexo <span class="hljs-keyword">new</span> <span class="hljs-string">&quot;postName&quot;</span>         <span class="hljs-meta">#新建文章</span><br>hexo <span class="hljs-keyword">new</span> page <span class="hljs-string">&quot;pageName&quot;</span>    <span class="hljs-meta">#新建页面</span><br>hexo generate || hexo g     <span class="hljs-meta">#生成网页，可在public目录查看</span><br>hexo <span class="hljs-keyword">server</span> || hexo s       <span class="hljs-meta">#本地预览</span><br>hexo deploy || hexo d       <span class="hljs-meta">#部署.deploy目录</span><br>hexo clean || hexo c        <span class="hljs-meta">#清除缓存，每次部署前都要删除.deploy目录</span><br><span class="hljs-meta"># 常用组合</span><br>hexo cl &amp;&amp; hexo g &amp;&amp; hexo d <span class="hljs-meta"># 部署到服务器</span><br>hexo cl &amp;&amp; hexo g &amp;&amp; hexo s <span class="hljs-meta"># 本地部署</span><br></code></pre></td></tr></table></figure><h2 id="进阶使用"><a href="#进阶使用" class="headerlink" title="进阶使用"></a>进阶使用</h2><p>暂无，后续有会持续更新</p><h1 id="GitHub-Pages"><a href="#GitHub-Pages" class="headerlink" title="GitHub Pages"></a>GitHub Pages</h1><h2 id="创建GitHub-托管仓库"><a href="#创建GitHub-托管仓库" class="headerlink" title="创建GitHub 托管仓库"></a>创建GitHub 托管仓库</h2><p>创建名称为username.github.io的仓库，这是特殊的命名约定。可以通过 <a href="">http://username.github.io</a> 来访问个人主页</p><h2 id="生成SSH-key"><a href="#生成SSH-key" class="headerlink" title="生成SSH key"></a>生成SSH key</h2><p>参考我之前写的关于SSH key的文章：<a href="/2025/06/21/%E7%94%9F%E6%88%90ssh-key/" title="生成ssh key">生成ssh-key</a></p><h2 id="修改Hexo部署配置"><a href="#修改Hexo部署配置" class="headerlink" title="修改Hexo部署配置"></a>修改Hexo部署配置</h2><p>_config.yml文件在Hexo 项目根目录下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml">deploy:<br>  type: git<br>  repo: git@github.com:yourname/yourname.github.io.git<br>  branch: master<br></code></pre></td></tr></table></figure><h2 id="下载部署需要的插件"><a href="#下载部署需要的插件" class="headerlink" title="下载部署需要的插件"></a>下载部署需要的插件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>使用以下命令就可以部署了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo cl &amp;&amp; hexo g &amp;&amp; hexo d<br></code></pre></td></tr></table></figure><h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><h2 id="过程参考"><a href="#过程参考" class="headerlink" title="过程参考"></a>过程参考</h2><ol><li><a href="https://yupaits.com/%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/%E4%BD%BF%E7%94%A8hexo%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2">使用hexo快速搭建个人博客</a></li><li><a href="https://yupaits.com/%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/%E4%BD%BF%E7%94%A8hexo%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2">Hexo教程，看这一篇就够了- How to系列</a></li><li><a href="https://blog.csdn.net/qq_20042935/article/details/133920722">保姆级教程：从零构建GitHub Pages静态网站</a></li></ol><h2 id="过程遇到的一些问题"><a href="#过程遇到的一些问题" class="headerlink" title="过程遇到的一些问题"></a>过程遇到的一些问题</h2><ol><li><a href="https://blog.csdn.net/qq_43546721/article/details/139506583">完美解决 git 报错 “fatal: unable to access ‘https://github.com/.../.git‘: Recv failure Connection was rese</a></li><li><a href="https://blog.csdn.net/qq_41688840/article/details/125826614">部署hexo遇到报错ERROR Deployer not found: git的解决办法</a></li><li><a href="https://www.zhihu.com/question/38781463">hexo本地测试运行重启后页面空白,提示 : WARN No layout: index.html?</a></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>生成ssh key</title>
    <link href="/2025/06/21/%E7%94%9F%E6%88%90ssh-key/"/>
    <url>/2025/06/21/%E7%94%9F%E6%88%90ssh-key/</url>
    
    <content type="html"><![CDATA[<p><strong>目录 (Table of Contents)</strong></p><p>[TOCM]</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>“fatal: Could not read from remote repository.”</p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><ul><li>客户端与服务端未生成 ssh key</li><li>客户端与服务端的ssh key不匹配</li></ul><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p><strong>1. 生成新的SSH key</strong></p><p>如果是客户端与服务端未生成ssh key，那么直接使用：<br><code>ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</code></p><p><strong>2. 将SSH key 添加到 ssh-agent</strong></p><p>使用 <code>ssh-add ~/.ssh/id_rsa</code> 将产生的新ssh key添加到ssh-agent中</p><p><strong>补充：</strong> 如果出现“Could not open a connection to your authentication agent.”的错误可以使用以下两种方式解决：<code>eval &quot;$(ssh-agent -s)&quot;</code>或者<code>eval </code>ssh-agent&#96;&#96;</p><p><strong>3. 将SSH key 添加到你的GitHub账户</strong></p><p>在账户选项中选择 “<em>Settings</em>”–&gt;“<em>SSH and GPG keys</em>”–&gt;“<em>New SSH key</em>”，然后打开之前新生成的id_rsa.pub文件，将密钥复制后填写到账户中【注意填写时的格式要求】</p><p><strong>4. 验证key</strong></p><p>使用 <code>ssh -T git@github.com</code> 对ssh key 进行验证</p><p><code>Hi Q180! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>问题/bug</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
